#include <cstdio>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <deque>
#include <string>
#include <algorithm>
#include <cmath>
#include <queue>
#include <climits>
#include <map>
#include <set>
using namespace std;
//#define MDEBUG true
#define MMAXLEN 1002
int tree[MMAXLEN], n, CBT[MMAXLEN];

int findNum(int n){
    int i = 1;
    while(i <= n + 1)
        i = i << 1;
    return i >> 1;
}

int buildCBT(int left, int right, int pos){
    if(right == left)
        return left;
    int len = right - left;
    if(len == 1){
        CBT[pos] = tree[left];
        return left;
    }
    int a = findNum(len) - 1;
    int lastLevelNum = a + 1, rootVal, rootPos;
    if(len - a <= lastLevelNum / 2)
        rootPos = (left + len - a + right - 1) / 2;
    else
        rootPos = (left + lastLevelNum / 2 + right - (len - a - lastLevelNum / 2) - 1) / 2;

    rootVal = tree[rootPos];
    CBT[pos] = rootVal;
    buildCBT(left, rootPos, pos * 2 + 1);
    buildCBT(rootPos + 1, right, pos * 2 + 2);

    return rootPos;
}

int main(void){
    scanf("%d", &n);
    for(int i = 0; i < n; i++)
        scanf("%d", &tree[i]);

    sort(tree, tree + n);
    int root = buildCBT(0, n, 0);
    for(int i = 0; i < n - 1; i++)
        printf("%d ", CBT[i]);
    printf("%d", CBT[n - 1]);
    return 0;
}
