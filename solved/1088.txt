#include <cstdio>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <deque>
#include <string>
#include <algorithm>
#include <cmath>
#include <queue>
#include <climits>
#include <map>
#include <set>
using namespace std;
//#define MDEBUG true
#define MMAXLEN 202

long long getGcd(long long a, long long b)
{
    if(a < b)
        swap(a, b);
    if(b == 0)
        return 1;
    while(a % b != 0){
        long long t = b;
        b = a % b;
        a = t;
    }
    if(b < 0)
        b = -b;
    return b;
}

void printNum(long long a, long long b)
{
    if(b == 0){
        printf("Inf");
        return;
    }
    if(a < 0 && b < 0)
        a = -a, b = -b;
    bool flag = false;
    if(a < 0 || b < 0){
        flag = true;
        a = a < 0 ? -a : a;
        b = b < 0 ? -b : b;
    }
    if(a == 0){
        printf("0");
        return;
    }
    long long intergerPart = a / b;
    a -= b * intergerPart;
    if(flag)
        printf("(-");
    if(intergerPart || !a)
        printf("%lld", intergerPart);

    if(intergerPart && a)
        printf(" ");
    if(a)
        printf("%lld/%lld", a, b);
    if(flag)
        printf(")");
}

int main(void)
{
    long long a1, a2, b1, b2, a3, b3, gcd;
    scanf("%lld/%lld%lld/%lld", &a1, &b1, &a2, &b2);
    if(b1 < 0 && a1 >= 0)
        a1 = -a1, b1 = -b1;
    if(b2 < 0 && a2 >= 0)
        a2 = -a2, b2 = -b2;
    gcd = getGcd(a1, b1);
    a1 /= gcd, b1 /= gcd;
    gcd = getGcd(a2, b2);
    a2 /= gcd, b2 /= gcd;

    a3 = a1 * b2 + a2 * b1;
    b3 = b1 * b2;
    gcd = getGcd(a3, b3);
    a3 /= gcd;
    b3 /= gcd;
    printNum(a1, b1);
    printf(" + ");
    printNum(a2, b2);
    printf(" = ");
    printNum(a3, b3);
    puts("");

    a3 = a1 * b2 - a2 * b1;
    b3 = b1 * b2;
    gcd = getGcd(a3, b3);
    a3 /= gcd;
    b3 /= gcd;
    printNum(a1, b1);
    printf(" - ");
    printNum(a2, b2);
    printf(" = ");
    printNum(a3, b3);
    puts("");

    a3 = a1 * a2;
    b3 = b1 * b2;
    gcd = getGcd(a3, b3);
    a3 /= gcd;
    b3 /= gcd;
    printNum(a1, b1);
    printf(" * ");
    printNum(a2, b2);
    printf(" = ");
    printNum(a3, b3);
    puts("");

    a3 = a1 * b2;
    b3 = b1 * a2;
    gcd = getGcd(a3, b3);
    a3 /= gcd;
    b3 /= gcd;
    printNum(a1, b1);
    printf(" / ");
    printNum(a2, b2);
    printf(" = ");
    printNum(a3, b3);

    return 0;
}
