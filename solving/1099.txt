#include <cstdio>
#include <cstring>
#include <vector>
#include <queue>
#include <string>
#include <algorithm>
using namespace std;

struct tree_node{
    int num;
    int left_node, right_node;
    int level = 0;
    int val;
    int val_pos = 0;
};

tree_node tree[100];
int val_arr[100];

int count_tree_node(int root)
{
    if(root == -1)
        return 0;
    else
        return count_tree_node(tree[root].left_node) + count_tree_node(tree[root].right_node) + 1;
}

void build_BST(int root, int start)
{
    if(root == -1)
        return;
    int pos = count_tree_node(tree[root].left_node);
    //printf("node %d child num = %d\n", root, start + pos);
    tree[root].val = val_arr[start + pos];
    build_BST(tree[root].left_node, start);
    build_BST(tree[root].right_node, start + 1 + pos);
}

bool cmp_node(tree_node a, tree_node b)
{
    if(a.level == b.level)
        return a.val < b.val;
    else
        return a.level < b.level;
}

int main(void)
{
    int n;
    scanf("%d", &n);
    for(int i = 0; i < n; i++){
        scanf("%d%d", &(tree[i].left_node), &(tree[i].right_node));
        tree[i].num = 0;
        if(tree[i].left_node != -1)
            tree[tree[i].left_node].level = tree[i].level + 1;
        if(tree[i].right_node != -1)
            tree[tree[i].right_node].level = tree[i].level + 1;

    }

    /*for(int i = 0; i < n; i++)
        printf("node %d in level %d\n", i, tree[i].level);*/

    for(int i = 0; i < n; i++)
        scanf("%d", &val_arr[i]);

    sort(val_arr, val_arr + n);

    build_BST(0, 0);

    /*for(int i = 0; i < n; i++)
        printf("node %d in level %d val %d\n", i, tree[i].level, tree[i].val);*/

    sort(tree, tree + n, cmp_node);

    char s_ret[2000] = "", t[14];

    for(int i = 0; i < n; i++){
        sprintf(t, "%d ", tree[i].val);
        strcat(s_ret, t);
    }

    if(s_ret[strlen(s_ret) - 1] == ' ')
        s_ret[strlen(s_ret) - 1] = 0;

    printf("%s", s_ret);

    return 0;
}
