#include <cstdio>
#include <cstring>
#include <vector>
using namespace std;

int n,m,start_node,end_node;

struct g_node_list{
    int next_pos;
    int length;
};

struct g_node{
    int pos;
    int team_num;
    int shortest_length = 0x7fffffff;
    bool has_shortest = false;//是否已经最短
    bool has_checked = false;
    vector<g_node_list> next_list;
};

vector<g_node> g;
int total_team_tmp = 0, total_team = 0, total_path = 0;
int deep_len = 0, start_end_len = 0;

void deep_search(int node_pos)
{
    if(node_pos == end_node){
        total_team_tmp += g[node_pos].team_num;
        if(total_team_tmp > total_team)
            total_team = total_team_tmp;
        total_path++;
        total_team_tmp -= g[node_pos].team_num;
        return ;
    }
    if(g[node_pos].has_checked)
        return;

    g[node_pos].has_checked = true;
    total_team_tmp += g[node_pos].team_num;
    for(auto i : g[node_pos].next_list){
        if(g[i.next_pos].shortest_length - g[node_pos].shortest_length == i.length)
            deep_search(i.next_pos);
    }
    total_team_tmp -= g[node_pos].team_num;
}

bool shortest_path_not_end(void)
{
    return !g[end_node].has_shortest;
}

void shortest_path(void)
{
    int now_pos = start_node;
    while(shortest_path_not_end()){
        for(auto i : g[now_pos].next_list){
            if(g[now_pos].shortest_length + i.length < g[i.next_pos].shortest_length)
                g[i.next_pos].shortest_length = g[now_pos].shortest_length + i.length;
        }
        int s = 0x7fffffff,shortest_pos;
        for(auto i : g){
            if(!i.has_shortest && i.shortest_length < s){
                s = i.shortest_length;
                shortest_pos = i.pos;
            }
        }

        now_pos = shortest_pos;
        g[shortest_pos].has_shortest = true;
    }

    start_end_len = g[end_node].shortest_length;
}

int main(void)
{
    int i,j;
    scanf("%d%d%d%d", &n, &m, &start_node, &end_node);
    for(i = 0; i < n; i++){
        g_node t;
        scanf("%d", &t.team_num);
        t.pos = i;
        g.push_back(t);
    }
    for(i = 0; i < m; i++){
        int a,b,l;
        scanf("%d%d%d", &a, &b, &l);
        g_node_list tmp;
        tmp.next_pos = b;
        tmp.length = l;
        g[a].next_list.push_back(tmp);
        tmp.next_pos = a;
        g[b].next_list.push_back(tmp);
    }

    g[start_node].shortest_length = 0;
    shortest_path();

    /*for(auto i : g){
        printf("%d节点到%d节点距离为:%d\n", i.pos, start_node, i.shortest_length);
    }*/

    deep_search(start_node);
    printf("%d %d", total_path, total_team);

    return 0;
}
