#include <cstdio>
#include <cstring>
#include <vector>
#include <queue>
using namespace std;

int n,m,k,q;

struct m_time{
    int hour = 8;
    int minute = 0;
    m_time(int h = 8, int m = 0):hour(h), minute(m){}
    m_time &operator + (int b);
    m_time &operator = (m_time &b);
    bool operator == (m_time &b);
    bool operator != (m_time &b);

    void print(void);

};

m_time& m_time::operator + (int b){
    m_time* ret = new m_time;
    ret->minute = minute + b;
    ret->hour = hour + (ret->minute / 60);
    ret->minute = ret->minute % 60;
    return (*ret);
}

m_time& m_time::operator = (m_time &b){
    hour = b.hour;
    minute = b.minute;
    return (*this);
}

bool m_time::operator == (m_time &b){
    return (hour == b.hour && minute == b.minute);
}

bool m_time::operator != (m_time &b){
    return !(hour == b.hour && minute == b.minute);
}

void m_time::print(void){
    printf("%02d:%02d\n", hour, minute);
}

struct customer{
    int time;
    int pos;
    m_time end_time;
};

customer cus[1001];

int main(void)
{
    int i,j;
    vector<queue<customer> > guitai;
    queue<customer> duilie;
    scanf("%d%d%d%d", &n, &m, &k, &q);
    for(i = 0; i < k; i++){
        scanf("%d", &(cus[i].time));
        cus[i].pos = i;
    }

    for(i = 0; i < k; i++){
        duilie.push(cus[i]);
    }

    for(i = 0; i < n; i++){
        queue<customer> t;
        guitai.push_back(t);
    }

    int tt = 0;
    while(guitai[n - 1].size() < m){
        if(duilie.empty())
            break;
        guitai[tt].push(duilie.front());
        duilie.pop();
        tt = (tt + 1) % n;
    }

    m_time m_timer;
    vector<m_time> m_start_timer(n);
    for(;;){
        if(m_timer.hour >= 17 && m_timer.minute > 0)
            break;
        m_timer = m_timer + 1;//这里有问题
        //m_timer.print();
        for(i = 0; i < n; i++){
            if(guitai[i].empty())
                continue;
            auto c = guitai[i].front();
            if(m_start_timer[i] + c.time == m_timer){
                guitai[i].pop();
                cus[c.pos].end_time = m_timer;
                if(!duilie.empty()){
                    auto t = duilie.front();
                    guitai[i].push(t);
                    duilie.pop();
                }
                m_start_timer[i] = m_timer;
            }
        }
    }

    for(i = 0; i < q; i++){
        int query;
        scanf("%d", &query);
        query--;
        if(cus[query].end_time.hour == 8 && cus[query].end_time.minute == 0)
            printf("Sorry\n");
        else
            cus[query].end_time.print();
    }

    //printf("%d", guitai[0].size());

    return 0;
}
